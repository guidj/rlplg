[tox]
envlist = py38,docs,manifest,check-formatting,lint
skipsdist = True
usedevelop = True

[testenv]
basepython = python3.8
deps =
    -r{toxinidir}/dev-requirements.txt
commands =
    coverage run -m pytest {posargs}

[testenv:docs]
deps = -rdocs-requirements.txt
commands =
    mkdocs build --strict

[testenv:manifest]
; a safety check for source distributions
basepython = python3.8
deps = check-manifest
skip_install = true
commands = check-manifest

; "black" is a code formatter, much like gofmt. It requires 3.6 or higher.
; This env just runs `black` and fails tox if it's not formatted correctly.
; If this env fails, run `tox -e format` locally in order to apply changes.
[testenv:check-formatting]
basepython = python3.8
deps = black
skip_install = true
commands =
    black src/rlplg tests --line-length 88 --diff --check

[testenv:format]
basepython = python3.8
deps = black
skip_install = true
commands =
    black src/rlplg tests --line-length 88

[testenv:lint]
; feel free to add flake8 plugins (i.e. flake8-import-order), add isort,
; or use another linter of your choice
basepython = python3.8
deps = flake8
skip_install = true
commands = flake8

; The sections defined below are for configuring specific tools that are used
; in the above testenvs. Usually, if the tool is ran directly/outside of tox,
; i.e. `(env) $ pytest`, it will still pick up this configuration.

[flake8]
show-source = true
max-line-length = 88
exclude = .venv,.tox,.git,dist,doc,*.egg,build
extend-ignore = E203, W503, E501

[pytest]
addopts = -v --cov=rlplg --cov-report=xml:cobertura/coverage.xml --cov-report=term-missing --junitxml=junit.xml
testpaths = tests
